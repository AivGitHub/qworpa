from dataclasses import dataclass
from http import HTTPStatus
from smtplib import SMTPException
from typing import List, Optional

from django.conf import settings
from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.core.mail import BadHeaderError, send_mail
from django.views.generic import TemplateView
from django.shortcuts import render
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.utils.translation import gettext_lazy as _
from django.views.generic import FormView, ListView

from accounts.forms import FeedbackMessageForm
from authentications.forms import ChangePasswordForm
from blogs.models import Post


def bad_request(request):
    return render(request, 'accounts/errors/error_500.html', context={}, status=HTTPStatus.INTERNAL_SERVER_ERROR)


def not_found(request, exception):
    return render(request, 'accounts/errors/error_404.html', context={}, status=HTTPStatus.NOT_FOUND)


@dataclass
class SimpleMessageAction:
    link: str
    message: Optional[str] = None


@dataclass
class SimpleMessage:
    user_name: str
    preview: str
    header: str
    body: List[str]
    signature: str


@dataclass
class SimpleMessageTemplateContent:
    message: SimpleMessage
    action: Optional[SimpleMessageAction] = None


class UserPermissionsMixin(UserPassesTestMixin):
    def test_func(self):
        obj = self.get_object()
        return obj.author == self.request.user


class ContactView(FormView):
    template_name = 'accounts/contact.html'
    form_class = FeedbackMessageForm
    success_url = '.'
    extra_context = {
        'submit_button_text': _('Contact us'),
    }

    def get_context_data(self, **kwargs):
        context = super(ContactView, self).get_context_data(**kwargs)
        return context

    @staticmethod
    def get_message_content(message):
        return SimpleMessageTemplateContent(
                    message=SimpleMessage(
                        user_name=message.name,
                        preview=_('We are thrilled that the %s suits your needs. '
                                  'Your feedback has demonstrated that we are doing something you like.'
                                  ) % settings.PROJECT_NAME.capitalize(),
                        header=_('Thank you for your valuable feedback.'),
                        body=[
                            _('We are thrilled that the %s suits your needs. '
                              'Your feedback has demonstrated that we are doing something you like.'
                              ) % settings.PROJECT_NAME.capitalize(),
                            _('We\'d love to hear from you again!'),
                            _('Have a wonderful day!'),
                            _('Best regards,'),
                        ],
                        signature=_('%s Team') % settings.PROJECT_NAME.capitalize()
                    ),
                    action=SimpleMessageAction(
                        link=settings.PROJECT_URL,
                        message=_('Go back home!')
                    )
                )

    def form_valid(self, form):
        message = form.save()
        html_message = render_to_string(
            'accounts/emails/simple_message.html', context={
                'content': self.get_message_content(message),
            }
        )
        original_message = strip_tags(html_message)
        try:
            send_mail(
                _('Subject'),
                original_message,
                settings.DEFAULT_FROM_EMAIL,
                [message.email],
                html_message=html_message
            )
        except (BadHeaderError, SMTPException):
            messages.error(
                self.request,
                _(
                    '<p>%(user_name)s, thank you for your feedback.</p>'
                    '<p>You should have received an e-mail on %(user_email)s, but something went wrong.</p>'
                ) % ({
                    'user_name': message.name,
                    'user_email': message.email,
                })
            )
        else:
            messages.success(
                self.request,
                _(
                    '<p>%(user_name)s, thank you for your feedback.</p>'
                    '<p>You will receive autogenerated e-mail on %(user_email)s.</p>'
                ) % ({
                    'user_name': message.name,
                    'user_email': message.email,
                })
            )
        return super(ContactView, self).form_valid(form)


class AboutView(TemplateView):
    template_name = 'accounts/about.html'


class FeedView(ListView):
    template_name = 'accounts/feeds.html'
    extra_context = {
        'hide_back_button': True,
    }

    def get_queryset(self, *args, **kwargs):
        return Post.objects.smart_select()


class SettingsView(LoginRequiredMixin, TemplateView):
    template_name = 'accounts/settings.html'

    def get(self, request, *args, **kwargs):
        context = self.get_context_data(**kwargs)
        context.update(
            dict(password_form=ChangePasswordForm(request.user))
        )
        return self.render_to_response(context)
